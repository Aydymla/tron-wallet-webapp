import os
import asyncio
import logging
import aiosqlite
import aiohttp
import hashlib
from datetime import datetime
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup

from tronpy import Tron
from tronpy.keys import PrivateKey
from tronpy.providers import HTTPProvider
from bip_utils import Bip39MnemonicGenerator, Bip39SeedGenerator, Bip44, Bip44Coins, Bip44Changes



load_dotenv()
logging.basicConfig(level=logging.INFO)
logging.getLogger("aiogram").setLevel(logging.DEBUG)


BOT_TOKEN = os.getenv("BOT_TOKEN")
TRON_API_KEY = os.getenv("TRON_PRO_API_KEY")
USDT_CONTRACT = os.getenv("USDT_CONTRACT_ADDRESS")
AML_ID = os.getenv("AML_ACCESS_ID")
AML_KEY = os.getenv("AML_ACCESS_KEY")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

client = Tron(provider=HTTPProvider(api_key=TRON_API_KEY))
contract = client.get_contract(USDT_CONTRACT)

# === FSM –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–¥—Ä–µ—Å–æ–º ===
class WalletAction(StatesGroup):
    waiting_for_choice = State()
    waiting_for_amount = State()
    confirm = State()

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
async def init_db():
    async with aiosqlite.connect("wallets.db") as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS wallets (
            user_id INTEGER PRIMARY KEY,
            mnemonic TEXT,
            address TEXT
        )""")
        await db.execute("""
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            tx_hash TEXT,
            type TEXT,
            from_address TEXT,
            to_address TEXT,
            amount REAL,
            timestamp TEXT,
            tronscan_url TEXT
        )""")
        await db.commit()


# === –£—Ç–∏–ª–∏—Ç—ã TRON ===
def create_wallet():
    mnemonic_obj = Bip39MnemonicGenerator().FromWordsNumber(12)
    mnemonic = str(mnemonic_obj)  # ‚úÖ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–æ–∫—É
    seed = Bip39SeedGenerator(mnemonic).Generate()
    bip44 = (
        Bip44.FromSeed(seed, Bip44Coins.TRON)
        .Purpose()
        .Coin()
        .Account(0)
        .Change(Bip44Changes.CHAIN_EXT)
        .AddressIndex(0)
    )
    private_key = bip44.PrivateKey().Raw().ToBytes()
    address = bip44.PublicKey().ToAddress()
    return mnemonic, address, private_key


# === /wallet ===
@dp.message(Command("wallet"))
async def show_wallet_balance(message: types.Message):
    user_id = message.from_user.id
    logging.info(f"[DEBUG] –ö–æ–º–∞–Ω–¥–∞ /wallet –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    try:
        async with aiosqlite.connect("wallets.db") as db:
            async with db.execute("SELECT address FROM wallets WHERE user_id = ?", (user_id,)) as cur:
                row = await cur.fetchone()

        if not row:
            await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å.")
            return

        address = row[0]
        logging.info(f"[DEBUG] –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω: {address}")

        async with aiohttp.ClientSession() as session:
            trx_url = f"https://api.trongrid.io/v1/accounts/{address}"
            async with session.get(trx_url) as resp:
                acc_data = await resp.json()
                logging.debug(f"[DEBUG] –û—Ç–≤–µ—Ç –æ—Ç TronGrid: {acc_data}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ TronGrid –≤–µ—Ä–Ω—É–ª —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ
        if not acc_data.get("data"):
            await message.answer(
                f"üíº <b>–í–∞—à TRON –∫–æ—à–µ–ª—ë–∫</b>\n\n"
                f"<b>–ê–¥—Ä–µ—Å:</b> <code>{address}</code>\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å TRX: 0.0000\n"
                f"üíµ –ë–∞–ª–∞–Ω—Å USDT: 0.00\n"
                f"‚ö° Energy: 0\n"
                f"üîã Bandwidth: 0\n\n"
                f"üÜï –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å, –ø–æ–∫–∞ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n"
                f"<a href='https://tronscan.org/#/address/{address}'>üîó –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Tronscan</a>"
            )
            return

        account = acc_data["data"][0]
        trx_balance = account.get("balance", 0) / 1e6
        energy = account.get("energy", 0)
        bandwidth = account.get("free_net_usage", 0)

        usdt_contract = "TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t"
        tokens = account.get("trc20", [])
        usdt_balance = 0
        for token in tokens:
            if usdt_contract in token:
                usdt_balance = float(token[usdt_contract]) / 1e6
                break

        await message.answer(
            f"üíº <b>–í–∞—à TRON –∫–æ—à–µ–ª—ë–∫</b>\n\n"
            f"<b>üè¶ –ê–¥—Ä–µ—Å:</b> <code>{address}</code>\n"
            f"<b>üí∞ TRX:</b> {trx_balance:.4f}\n"
            f"<b>üíµ USDT:</b> {usdt_balance:.2f}\n"
            f"<b>‚ö° Energy:</b> {energy}\n"
            f"<b>üîã Bandwidth:</b> {bandwidth}\n\n"
            f"<a href='https://tronscan.org/#/address/{address}'>üîó –°–º–æ—Ç—Ä–µ—Ç—å –≤ Tronscan</a>"
        )

    except Exception as e:
        logging.error(f"[ERROR /wallet] {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



def get_private_key(mnemonic):
    seed = Bip39SeedGenerator(mnemonic).Generate()
    bip44 = Bip44.FromSeed(seed, Bip44Coins.TRON).Purpose().Coin().Account(0).Change(Bip44Changes.CHAIN_EXT).AddressIndex(0)
    return PrivateKey(bip44.PrivateKey().Raw().ToBytes())


@dp.message(Command("app"))
async def open_webapp(message: types.Message):
    webapp_url = "https://yourdomain.com/"  # –∏–ª–∏ http://127.0.0.1:8000/
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å –∫–æ—à–µ–ª—ë–∫", web_app=types.WebAppInfo(url=webapp_url))]
        ]
    )
    await message.answer("–û—Ç–∫—Ä–æ–π—Ç–µ WebApp:", reply_markup=keyboard)
    

# === /start ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    async with aiosqlite.connect("wallets.db") as db:
        async with db.execute("SELECT address FROM wallets WHERE user_id = ?", (user_id,)) as cur:
            existing_wallet = await cur.fetchone()

    if existing_wallet:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å", callback_data="recreate_wallet"),
                InlineKeyboardButton(text="‚ùå –û—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–π", callback_data="cancel_wallet_action")
            ]
        ])
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç!\n"
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫.\n"
            "–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–π?",
            reply_markup=keyboard
        )
        return

    # –ï—Å–ª–∏ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º —Å—Ä–∞–∑—É
    await create_new_wallet(message, user_id)


# === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ ===
@dp.callback_query(F.data == "recreate_wallet")
async def confirm_recreate_wallet(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    async with aiosqlite.connect("wallets.db") as db:
        await db.execute("DELETE FROM wallets WHERE user_id = ?", (user_id,))
        await db.commit()

    await create_new_wallet(callback.message, user_id)
    await callback.answer()


@dp.callback_query(F.data == "cancel_wallet_action")
async def cancel_wallet_action(callback: types.CallbackQuery):
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –°—Ç–∞—Ä—ã–π –∫–æ—à–µ–ª—ë–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await callback.answer()


# === –í—ã–Ω–µ—Å–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ ===
async def create_new_wallet(message: types.Message, user_id: int):
    mnemonic, address, _ = create_wallet()

    async with aiosqlite.connect("wallets.db") as db:
        await db.execute(
            "INSERT INTO wallets (user_id, mnemonic, address) VALUES (?, ?, ?)",
            (user_id, mnemonic, address)
        )
        await db.commit()

    await message.answer(
        f"‚úÖ <b>–í–∞—à –Ω–æ–≤—ã–π TRON-–∫–æ—à–µ–ª—ë–∫ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"<b>üîë Seed —Ñ—Ä–∞–∑–∞:</b>\n<tg-spoiler>{mnemonic}</tg-spoiler>\n\n"
        f"<b>üíº –ê–¥—Ä–µ—Å:</b> <code>{address}</code>\n\n"
        f"‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–∏–¥-—Ñ—Ä–∞–∑—É ‚Äî –±–µ–∑ –Ω–µ—ë –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."
    )

# === –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ USDT ===
async def check_incoming():
    while True:
        try:
            async with aiosqlite.connect("wallets.db") as db:
                async with db.execute("SELECT user_id, address FROM wallets") as cur:
                    wallets = await cur.fetchall()

            for user_id, address in wallets:
                url = f"https://api.trongrid.io/v1/accounts/{address}/transactions/trc20?limit=5"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as resp:
                        data = await resp.json()

                for tx in data.get("data", []):
                    if tx.get("to") == address and tx["token_info"]["address"] == USDT_CONTRACT:
                        txid = tx["transaction_id"]
                        amount = int(tx["value"]) / 1e6
                        sender = tx["from"]

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
                        async with aiosqlite.connect("wallets.db") as db:
                            async with db.execute("SELECT 1 FROM transactions WHERE tx_hash = ?", (txid,)) as c:
                                if await c.fetchone():
                                    continue

                            await db.execute("""
                            INSERT INTO transactions (user_id, tx_hash, type, from_address, to_address, amount, timestamp, tronscan_url)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                            """, (user_id, txid, "incoming", sender, address, amount,
                                  datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                                  f"https://tronscan.org/#/transaction/{txid}"))
                            await db.commit()

                        aml = await check_aml(sender)
                        risk = aml.get("risk_score_level", "unknown").upper()
                        await bot.send_message(
                            chat_id=user_id,
                            text=(
                                f"üì• <b>–ü–æ–ª—É—á–µ–Ω–æ {amount} USDT!</b>\n"
                                f"<b>–û—Ç:</b> <code>{sender}</code>\n"
                                f"<b>–†–∏—Å–∫ AML:</b> {risk}\n"
                                f"<b>–•–µ—à:</b> <code>{txid}</code>\n"
                                f"<a href='https://tronscan.org/#/transaction/{txid}'>üîó –°–º–æ—Ç—Ä–µ—Ç—å –≤ Tronscan</a>"
                            )
                        )
            await asyncio.sleep(15)
        except Exception as e:
            logging.error(e)
            await asyncio.sleep(10)


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ AML ===
async def check_aml(address: str):
    token_str = f"{address}:{AML_KEY}:{AML_ID}"
    token = hashlib.md5(token_str.encode()).hexdigest()
    data = {"hash": address, "asset": "TRX", "accessId": AML_ID, "token": token, "locale": "en_US", "flow": "lite"}

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post("https://extrnlapiendpoint.silencatech.com/", data=data) as resp:
                return await resp.json()
    except:
        return {"risk_score_level": "unknown"}


# === –ê–≤—Ç–æ-–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–¥—Ä–µ—Å–æ–º TRON ===

@dp.message(StateFilter(WalletAction.waiting_for_amount), F.text)
async def handle_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.strip())
        await state.update_data(amount=amount)

        data = await state.get_data()
        addr = data["address"]

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_yes"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="confirm_no")
            ]
        ])

        await state.set_state(WalletAction.confirm)
        await message.answer(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <b>{amount} USDT</b> –Ω–∞ –∞–¥—Ä–µ—Å <code>{addr}</code>?",
            reply_markup=keyboard
        )

        logging.info(f"[FSM] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Å—É–º–º—É: {amount} USDT")

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12.5)")

@dp.message(F.text)
async def handle_tron_address(message: Message, state: FSMContext):
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ TRON-–∞–¥—Ä–µ—Å
    if not (text.startswith("T") and len(text) == 34):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ

    await state.update_data(address=text)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å USDT", callback_data="send_usdt"),
            InlineKeyboardButton(text="üß≠ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å AML", callback_data="check_aml")
        ]
    ])

    await message.answer(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å USDT –Ω–∞ –∞–¥—Ä–µ—Å <code>{text}</code> –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å AML?",
        reply_markup=keyboard
    )


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ ===
@dp.callback_query(F.data == "check_aml")
async def handle_check_aml_callback(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    addr = data.get("address")

    if not addr:
        await callback.answer("‚ö†Ô∏è –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    aml = await check_aml(addr)
    risk = aml.get("risk_score_level", "unknown").upper()
    await callback.message.edit_text(
        f"üßæ –ü—Ä–æ–≤–µ—Ä–∫–∞ AML –¥–ª—è <code>{addr}</code>:\n–†–∏—Å–∫: <b>{risk}</b>"
    )
    await state.clear()
    await callback.answer()


@dp.callback_query(F.data == "send_usdt")
async def handle_send_usdt_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(WalletAction.waiting_for_amount)

    logging.info(f"[DEBUG] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")

    await callback.message.edit_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤ USDT):")
    await callback.answer()


@dp.callback_query(F.data.in_(["confirm_yes", "confirm_no"]))
async def handle_confirmation(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id
    addr, amount = data["address"], data["amount"]

    if callback.data == "confirm_no":
        await callback.message.edit_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        await callback.answer()
        return

    # === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ===
    async with aiosqlite.connect("wallets.db") as db:
        async with db.execute("SELECT mnemonic, address FROM wallets WHERE user_id = ?", (user_id,)) as cur:
            row = await cur.fetchone()

    if not row:
        await callback.message.edit_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /wallet.")
        await state.clear()
        await callback.answer()
        return

    mnemonic, from_address = row
    priv = get_private_key(mnemonic)
    balance = contract.functions.balanceOf(from_address)

    if balance < amount * 1e6:
        await callback.message.edit_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        await state.clear()
        await callback.answer()
        return

    txn = (
        contract.functions.transfer(addr, int(amount * 1e6))
        .with_owner(from_address)
        .fee_limit(100_000_000)
        .build()
        .sign(priv)
    )
    result = txn.broadcast().wait()
    txid = result["id"]

    async with aiosqlite.connect("wallets.db") as db:
        await db.execute("""
            INSERT INTO transactions (user_id, tx_hash, type, from_address, to_address, amount, timestamp, tronscan_url)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, (user_id, txid, "outgoing", from_address, addr, amount,
              datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
              f"https://tronscan.org/#/transaction/{txid}"))
        await db.commit()

    await callback.message.edit_text(
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {amount} USDT\nüîó <a href='https://tronscan.org/#/transaction/{txid}'>–°–º–æ—Ç—Ä–µ—Ç—å –≤ Tronscan</a>"
    )

    await state.clear()
    await callback.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")



# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await init_db()
    asyncio.create_task(check_incoming())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
